// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Nodeutil = require("node:util");

function string(x) {
  return x;
}

function buffer(x) {
  return x;
}

function int8Array(x) {
  return x;
}

function uInt8Array(x) {
  return x;
}

function uInt8ClampedArray(x) {
  return x;
}

function uInt16Array(x) {
  return x;
}

function int16Array(x) {
  return x;
}

function uInt32Array(x) {
  return x;
}

function int32Array(x) {
  return x;
}

function float32Array(x) {
  return x;
}

function float64Array(x) {
  return x;
}

function dataView(x) {
  return x;
}

function classify(x) {
  if (typeof x === "string") {
    return {
            TAG: /* String */0,
            _0: x
          };
  } else if (Buffer.isBuffer(x)) {
    return {
            TAG: /* Buffer */1,
            _0: x
          };
  } else if (Nodeutil.types.isInt8Array(x)) {
    return {
            TAG: /* Int8Array */3,
            _0: x
          };
  } else if (Nodeutil.types.isUint8Array(x)) {
    return {
            TAG: /* Uint8Array */2,
            _0: x
          };
  } else if (Nodeutil.types.isUint8ClampedArray(x)) {
    return {
            TAG: /* Uint8ClampedArray */4,
            _0: x
          };
  } else if (Nodeutil.types.isInt16Array(x)) {
    return {
            TAG: /* Int16Array */6,
            _0: x
          };
  } else if (Nodeutil.types.isUint16Array(x)) {
    return {
            TAG: /* Uint16Array */5,
            _0: x
          };
  } else if (Nodeutil.types.isInt32Array(x)) {
    return {
            TAG: /* Int32Array */8,
            _0: x
          };
  } else if (Nodeutil.types.isUint32Array(x)) {
    return {
            TAG: /* Uint32Array */7,
            _0: x
          };
  } else if (Nodeutil.types.isFloat32Array(x)) {
    return {
            TAG: /* Float32Array */9,
            _0: x
          };
  } else if (Nodeutil.types.isFloat64Array(x)) {
    return {
            TAG: /* Float64Array */10,
            _0: x
          };
  } else if (Nodeutil.types.isDataView(x)) {
    return {
            TAG: /* DataView */11,
            _0: x
          };
  } else if (Nodeutil.types.isStringObject(x)) {
    return {
            TAG: /* String */0,
            _0: x
          };
  } else {
    return {
            TAG: /* Unknown */12,
            _0: x
          };
  }
}

var Impl = {
  string: string,
  buffer: buffer,
  int8Array: int8Array,
  uInt8Array: uInt8Array,
  uInt8ClampedArray: uInt8ClampedArray,
  uInt16Array: uInt16Array,
  int16Array: int16Array,
  uInt32Array: uInt32Array,
  int32Array: int32Array,
  float32Array: float32Array,
  float64Array: float64Array,
  dataView: dataView,
  classify: classify
};

exports.Impl = Impl;
exports.string = string;
exports.buffer = buffer;
exports.int8Array = int8Array;
exports.uInt8Array = uInt8Array;
exports.uInt8ClampedArray = uInt8ClampedArray;
exports.uInt16Array = uInt16Array;
exports.int16Array = int16Array;
exports.uInt32Array = uInt32Array;
exports.int32Array = int32Array;
exports.float32Array = float32Array;
exports.float64Array = float64Array;
exports.dataView = dataView;
exports.classify = classify;
/* node:util Not a pure module */
